{"ast":null,"code":"import { GET_USERS, USER_UPDATED, ERR } from '../constants/action-types';\nconst sample_payload = [{\n  id: '45544',\n  name: 'Felix M',\n  occupation: 'Developer',\n  email: 'ssample@gmail.com',\n  bio: 'It is what it is',\n  created_at: Date.now()\n}];\nexport function getUserData() {\n  return function (dispatch) {\n    return fetch(\"https://ti-react-test.herokuapp.com/users\").then(response => response.json()).then(json => {\n      dispatch({\n        type: GET_USERS,\n        payload: sample_payload\n      });\n    });\n  };\n}\nexport default function editUserData(id) {\n  return function (dispatch) {\n    return fetch(\"https://ti-react-test.herokuapp.com/users/\" + id + \"\", {\n      method: 'PATCH',\n      body: JSON.stringify({\n        name: \"ALPHA ALPHA\",\n        email: 'sample@gmail.com',\n        occupation: \"Hunter\",\n        bio: 'LIVE FREE'\n      }),\n      headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n      }\n    }).then(response => response.json()).then(json => {\n      dispatch({\n        type: USER_UPDATED,\n        payload: json\n      });\n    }).catch(error => {\n      dispatch({\n        type: ERR,\n        payload: null\n      });\n    });\n  };\n}","map":{"version":3,"sources":["C:/Users/Anon/ReduxApp/src/actions/index.js"],"names":["GET_USERS","USER_UPDATED","ERR","sample_payload","id","name","occupation","email","bio","created_at","Date","now","getUserData","dispatch","fetch","then","response","json","type","payload","editUserData","method","body","JSON","stringify","headers","catch","error"],"mappings":"AAAA,SAAQA,SAAR,EAAkBC,YAAlB,EAA+BC,GAA/B,QAAyC,2BAAzC;AAGA,MAAMC,cAAc,GAAE,CAAC;AAACC,EAAAA,EAAE,EAAC,OAAJ;AAAYC,EAAAA,IAAI,EAAC,SAAjB;AAA2BC,EAAAA,UAAU,EAAC,WAAtC;AAAkDC,EAAAA,KAAK,EAAC,mBAAxD;AAA4EC,EAAAA,GAAG,EAAC,kBAAhF;AAAmGC,EAAAA,UAAU,EAACC,IAAI,CAACC,GAAL;AAA9G,CAAD,CAAtB;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC5B,SAAO,UAASC,QAAT,EAAkB;AACzB,WAAOC,KAAK,CAAC,2CAAD,CAAL,CACJC,IADI,CACCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADb,EAEJF,IAFI,CAECE,IAAI,IAAI;AACZJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAElB,SAAR;AAAmBmB,QAAAA,OAAO,EAAEhB;AAA5B,OAAD,CAAR;AACD,KAJI,CAAP;AAKC,GAND;AAOD;AAGD,eAAe,SAASiB,YAAT,CAAsBhB,EAAtB,EAA0B;AAEvC,SAAO,UAASS,QAAT,EAAkB;AAEzB,WAAOC,KAAK,CAAC,+CAA6CV,EAA7C,GAAgD,EAAjD,EAAoD;AACtDiB,MAAAA,MAAM,EAAE,OAD8C;AAEtDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACpBnB,QAAAA,IAAI,EAAC,aADe;AAEpBE,QAAAA,KAAK,EAAC,kBAFc;AAGpBD,QAAAA,UAAU,EAAC,QAHS;AAIpBE,QAAAA,GAAG,EAAC;AAJgB,OAAf,CAFgD;AAQtDiB,MAAAA,OAAO,EAAC;AACN,wBAAgB;AADV;AAR8C,KAApD,CAAL,CAcJV,IAdI,CAcCC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAdb,EAeJF,IAfI,CAeCE,IAAI,IAAI;AACXJ,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAEjB,YAAR;AAAsBkB,QAAAA,OAAO,EAAEF;AAA/B,OAAD,CAAR;AACF,KAjBI,EAkBJS,KAlBI,CAkBEC,KAAK,IAAI;AACZd,MAAAA,QAAQ,CAAC;AAAEK,QAAAA,IAAI,EAAEhB,GAAR;AAAaiB,QAAAA,OAAO,EAAE;AAAtB,OAAD,CAAR;AACH,KApBI,CAAP;AAqBC,GAvBD;AAwBD","sourcesContent":["import {GET_USERS,USER_UPDATED,ERR} from '../constants/action-types';\r\n\r\n\r\nconst sample_payload =[{id:'45544',name:'Felix M',occupation:'Developer',email:'ssample@gmail.com',bio:'It is what it is',created_at:Date.now()}];\r\n\r\nexport function getUserData() {\r\n  return function(dispatch){\r\n  return fetch(\"https://ti-react-test.herokuapp.com/users\")\r\n    .then(response => response.json())\r\n    .then(json => {\r\n      dispatch({ type: GET_USERS, payload: sample_payload });\r\n    });\r\n  };\r\n}\r\n\r\n\r\nexport default function editUserData(id) {\r\n\r\n  return function(dispatch){\r\n\r\n  return fetch(\"https://ti-react-test.herokuapp.com/users/\"+id+\"\",{\r\n            method: 'PATCH',\r\n            body: JSON.stringify({\r\n             name:\"ALPHA ALPHA\",\r\n             email:'sample@gmail.com',\r\n             occupation:\"Hunter\",\r\n             bio:'LIVE FREE'\r\n            }),\r\n            headers:{\r\n              \"Content-type\": \"application/json; charset=UTF-8\"\r\n            }\r\n          })\r\n\r\n\r\n    .then(response => response.json())\r\n    .then(json => {\r\n       dispatch({ type: USER_UPDATED, payload: json });\r\n    })\r\n    .catch(error => {\r\n        dispatch({ type: ERR, payload: null });\r\n    });\r\n  };\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}